{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [{
					"Label": {
						"default": "CloudShroud VPC Configuration"
					},
					"Parameters": ["VPCID", "CloudShroudAZs", "CloudShroudSubnets", "ControlBoxSubnet", "InstanceType", "KeyName", "SSHSourceIP"]
				}
			],
			"ParameterLabels": {
				"VPCID": {
					"default": "The VPC to deploy CloudShroud in"
				},
				"CloudShroudAZs": {
					"default": "Availability zones to create CloudShroud subnets in"
				},
				"CloudShroudSubnets": {
					"default": "Subnets that you want to use for VPN endpoints"
				},
				"ControlBoxSubnet": {
					"default": "The subnet that you want to launch the CloudShroud Controlbox in"
				},
				"InstanceType": {
					"default": "The instance type to use for VPN endpoints"
				},
				"KeyName": {
					"default": "The SSH keypair name to use"
				},
				"SSHSourceIP": {
					"default": "What public IP or IP range to allow SSH access from"
				}
			}

		}
	},

	"Parameters": {
		"KeyName": {
			"Description": "Name of an existing EC2 KeyPair",
			"Default": "MyKey",
			"Type": "AWS::EC2::KeyPair::KeyName",
			"ConstraintDescription": "must be the name of an existing EC2 KeyPair."
		},
		"InstanceType": {
			"Description": "Pick the instance type that you want to launch your VPN endpoints as. Note that the larger the instance type, the more bandwith capability you will have. Its recommend to start with something small and then benchmark later to determine if you need more capacity.",
			"Type": "String",
			"Default": "t2.small",
			"AllowedValues": ["t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "g2.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r3.large", "r3.xlarge", "r3.4xlarge", "r3.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge",
				"d2.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge"
			],
			"ConstraintDescription": "must be a valid EC2 type."
		},
		"SSHSourceIP": {
			"Description": "The public IP or IP range of your home or office that you want to allow SSH from.",
			"Type": "String",
			"MinLength": "9",
			"MaxLength": "18",
			"Default": "0.0.0.0/0",
			"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
		},
		"VPCID": {
			"Description": "This is the VPC id that you want to launch CloudShroud in. Note that you must create this VPC with an attached Internet Gateway (IGW) before launching this template.",
			"Type": "AWS::EC2::VPC::Id",
			"Default": "vpc-abcd1234",
			"ConstraintDescription": "must choose a valid existing VPC id."
		},
		"ControlBoxSubnet": {
			"Description": "The controlbox is the EC2 instance that monitors VPN endpoint health and is also the bastion host you will ssh into to setup VPNs, etc. NOTE! You must specify an existing subnet that *has internet access*, or you will get a Stack Rollback during the controlbox EC2 creation",
			"Type": "AWS::EC2::Subnet::Id",
			"Default": "subnet-abcd1234",
			"ConstraintDescription": "must choose a valid subnet id."
		},
		"CloudShroudSubnets": {
			"Description": "Specify two new subnet blocks of any size that can be created within your VPC to launch the CloudShroud VPN endpoints in. Each subnet will only have one EC2 in it, so you may choose to use something small (ie. /28). These subnets must not overlap existing subnets within your chosen VPC.",
			"Type": "CommaDelimitedList",
			"Default": "10.0.0.0/28, 10.0.0.16/28",
			"ConstraintDescription": "must be two valid *unused* subnets within your VPC CIDR. Specify comma delimited list (ie. 10.0.1.0/24, 10.0.2.0/24)"
		},
		"CloudShroudAZs": {
			"Description": "Pick two availability zones that you want to launch the VPN endpoints to be launched in. Using two AZs will ensure better high-availability of your VPN.",
			"Default": "us-east-1a, us-east-1b",
			"Type": "List<AWS::EC2::AvailabilityZone::Name>",
			"ConstraintDescription": "must choose valid AZs in the region you're attempting to launch the stack in"
		}
	},

	"Mappings": {
		"RegionMap": {
			"us-east-1": {
				"vyos": "ami-9c9a12f4",
				"controlbox": "ami-0b33d91d"
			},
			"us-west-1": {
				"vyos": "ami-cf47518a",
				"controlbox": "ami-165a0876"
			},
			"us-west-2": {
				"vyos": "ami-bd2e658d",
				"controlbox": "ami-f173cc91"
			},
			"eu-west-1": {
				"vyos": "ami-5e77c229",
				"controlbox": "ami-70edb016"
			},
			"ap-southeast-1": {
				"vyos": "ami-9a193ac8",
				"controlbox": "ami-dc9339bf"
			},
			"ap-southeast-2": {
				"vyos": "ami-e9a7c8d3",
				"controlbox": "ami-1c47407f"
			},
			"ap-northeast-1": {
				"vyos": "ami-d18cb2d0",
				"controlbox": "ami-56d4ad31"
			},
			"sa-east-1": {
				"vyos": "ami-2ddb6d30",
				"controlbox": "ami-80086dec"
			},
			"eu-central-1": {
				"vyos": "ami-6a97a577",
				"controlbox": "ami-af0fc0c0"
			},
			"ca-central-1": {
				"vyos": "ami-d48634b0",
				"controlbox": "ami-ebed508f"
			},
			"eu-west-2": {
				"vyos": "ami-cb212baf",
				"controlbox": "ami-f1949e95"
			}
		}
	},
	"Resources": {
		"CFsubnetAresource": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"CidrBlock": {
					"Fn::Select": ["0", {
							"Ref": "CloudShroudSubnets"
						}
					]
				},
				"AvailabilityZone": {
					"Fn::Select": ["0", {
							"Ref": "CloudShroudAZs"
						}
					]
				},
				"VpcId": {
					"Ref": "VPCID"
				},
				"Tags": [{
						"Key": "Name",
						"Value": "CloudShroudA"
					}
				]
			}
		},
		"CFsubnetBresource": {
			"Type": "AWS::EC2::Subnet",
			"Properties": {
				"CidrBlock": {
					"Fn::Select": ["1", {
							"Ref": "CloudShroudSubnets"
						}
					]
				},
				"AvailabilityZone": {
					"Fn::Select": ["1", {
							"Ref": "CloudShroudAZs"
						}
					]
				},
				"VpcId": {
					"Ref": "VPCID"
				},
				"Tags": [{
						"Key": "Name",
						"Value": "CloudShroudB"
					}
				]
			}
		},
		"CSroutetable": {
			"Type": "AWS::EC2::RouteTable",
			"Properties": {
				"VpcId": {
					"Ref": "VPCID"
				},
				"Tags": [{
						"Key": "Name",
						"Value": "CloudShroud"
					}
				]
			}
		},
		"eip1": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc",
				"InstanceId": {
					"Ref": "controlboxEC2"
				}
			}
		},
		"eip2": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc",
				"InstanceId": {
					"Ref": "CloudShroudEC2A"
				}
			}
		},
		"eip3": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc",
				"InstanceId": {
					"Ref": "CloudShroudEC2B"
				}
			}
		},
		
		"controlboxEC2": {
			"DependsOn": "CSroutetable",
			"CreationPolicy" : {
				"ResourceSignal" : {
				  "Timeout" : "PT2M"
				}
			  },
			"Type": "AWS::EC2::Instance",
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"configSets": {
						"Install": ["Install"]
					},

					"Install": {
						"packages": {
							"yum": {
								"expect": []
							}
						},
						"files": {
							"/etc/cloudshroud/update_endpoints.sh": {
								"source": "https://raw.githubusercontent.com/mysteryguy123/CloudShroud/master/update_endpoints.sh",
								"mode": "000755",
								"user": "ec2-user",
								"group": "ec2-user"
							},
							"/etc/cloudshroud/.initial_setup" : {
								"content": "0",
								"mode": "000600",
								"user": "ec2-user",
								"owner": "ec2-user",
								"group": "ec2-user"
							},
							"/etc/cloudshroud/body.sh": {
								"source": "https://raw.githubusercontent.com/mysteryguy123/CloudShroud/master/body.sh",
								"mode": "000755",
								"user": "ec2-user",
								"group": "ec2-user"
							},
							"/var/spool/cron/ec2-user": {
								"source": "https://raw.githubusercontent.com/mysteryguy123/CloudShroud/master/cron_task.txt",
								"mode": "000600",
								"owner": "ec2-user",
								"group": "ec2-user"
							}
							},
						"commands": {
							"setigw": {
								"command": "echo export MYIGW=\"$MYIGW\" >> /home/ec2-user/.bashrc",
								"env": {
									"MYIGW": {
										"Fn::Join": ["", ["export MYIGW=`aws ec2 describe-internet-gateways --filters 'Name=attachment.vpc-id,Values=", {
													"Ref": "VPCID"
												}, "' --region ", {
													"Ref": "AWS::Region"
												}, " --query 'InternetGateways[].InternetGatewayId[]' | grep -E -o igw-[a-z0-9]+`"]]
									}
								}
							},
							"setvpc": {
								"command": "echo export MYVPC=\"$MYVPC\" >> /home/ec2-user/.bashrc",
								"env": {
									"MYVPC": {
										"Ref": "VPCID"
									}
								}
							},
							"setregion": {
								"command": "echo export MYREGION=\"$MYREGION\" >> /home/ec2-user/.bashrc",
								"env": {
									"MYREGION": {
										"Ref": "AWS::Region"
									}
								}
							},
							"setroutetable": {
								"command": "echo export MYROUTETABLE=\"$MYROUTETABLE\" >> /home/ec2-user/.bashrc",
								"env": {
									"MYROUTETABLE": {
										"Ref": "CSroutetable"
									}
								}

							},
							"loginscripta": {
								"command": "echo $'\nForceCommand /etc/cloudshroud/body.sh' >> /etc/ssh/sshd_config"
							},
							"loginstart" : {
								"command" : "service sshd restart"
							},	
							"loginscriptb": {
								"command":"echo clear >> /home/ec2-user/.bashrc"
								}
						},
						"sources": {
							"/etc/cloudshroud/descriptions": "https://github.com/mysteryguy123/CloudShroud/raw/master/descriptions.zip"
							}

							
						}
					}
			
			},

			"Properties": {
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
								"#!/bin/bash -xe\n",
								"# Create the CloudShroud directory for all the files\n",
								" mkdir /etc/cloudshroud/\n",
								" chown ec2-user:ec2-user /etc/cloudshroud/\n",
								"# Install the files and packages from the metadata\n",
								"/opt/aws/bin/cfn-init -v ",
								"         --stack ", {
									"Ref": "AWS::StackName"
								},
								"         --resource controlboxEC2 ",
								"         --configsets Install ",
								"         --region ", {
									"Ref": "AWS::Region"
								},
								"\n",
								"# Signal success if internet access\n",
								"ping -c 4 -W 1 8.8.8.8\n",
								 "/opt/aws/bin/cfn-signal -e $? ",
								 "         --stack ", { "Ref" : "AWS::StackName" },
								 "         --resource controlboxEC2 ",
								 "         --region ", { "Ref" : "AWS::Region" }, "\n"
							]]
					}
				},

				"DisableApiTermination": "false",
				"InstanceInitiatedShutdownBehavior": "stop",
				"ImageId": {
					"Fn::FindInMap": ["RegionMap", {
							"Ref": "AWS::Region"
						}, "controlbox"]
				},
				"InstanceType": "t2.micro",
				"IamInstanceProfile": {
					"Ref": "CFInstanceProfile"
				},
				"KeyName": {
					"Ref": "KeyName"
				},
				"Monitoring": "false",
				"Tags": [{
						"Key": "Name",
						"Value": "CloudShroudControlBox"
					}
				],
				"NetworkInterfaces": [{
						"AssociatePublicIpAddress": "True",
						"DeleteOnTermination": "true",
						"Description": "Interface on CF controlbox",
						"DeviceIndex": 0,
						"SubnetId": {
							"Ref": "ControlBoxSubnet"
						},
						"GroupSet": [{
								"Ref": "CloudShroudsg"
							}
						]
					}
				]

			}
		},
		"CloudShroudEC2A": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"DisableApiTermination": "false",
				"InstanceInitiatedShutdownBehavior": "stop",
				"ImageId": {
					"Fn::FindInMap": ["RegionMap", {
							"Ref": "AWS::Region"
						}, "vyos"]
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"KeyName": {
					"Ref": "KeyName"
				},
				"Monitoring": "false",
				"SourceDestCheck": "false",
				"Tags": [{
						"Key": "Name",
						"Value": "CloudShroudA"
					}
				],
				"NetworkInterfaces": [{
						"DeleteOnTermination": "true",
						"Description": "Interface on CF VPN A",
						"DeviceIndex": 0,
						"SubnetId": {
							"Ref": "CFsubnetAresource"
						},
						"GroupSet": [{
								"Ref": "CloudShroudsg"
							}
						]
					}
				]

			}
		},
		"CloudShroudEC2B": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"DisableApiTermination": "false",
				"InstanceInitiatedShutdownBehavior": "stop",
				"ImageId": {
					"Fn::FindInMap": ["RegionMap", {
							"Ref": "AWS::Region"
						}, "vyos"]
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"KeyName": {
					"Ref": "KeyName"
				},
				"Monitoring": "false",
				"SourceDestCheck": "false",
				"Tags": [{
						"Key": "Name",
						"Value": "CloudShroudB"
					}
				],
				"NetworkInterfaces": [{
						"DeleteOnTermination": "true",
						"Description": "Interface on CF VPN B",
						"DeviceIndex": 0,
						"SubnetId": {
							"Ref": "CFsubnetBresource"
						},
						"GroupSet": [{
								"Ref": "CloudShroudsg"
							}
						]
					}
				]
			}
		},

		"CloudShroudPolicy": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"Roles": [{
						"Ref": "CloudShroudRole"
					}
				],
				"PolicyName": "CloudShroudAPIaccess",
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
							"Effect": "Allow",
							"Action": [
								"ec2:AuthorizeSecurityGroupIngress",
								"ec2:DescribeInstances",
								"ec2:DescribeInternetGateways",
								"ec2:DescribeSecurityGroups",
								"ec2:DescribeRouteTables",
								"ec2:CreateRoute",
								"ec2:ReplaceRoute",
								"ec2:RunInstances",
								"ec2:StopInstances"
							],
							"Resource": "*"
						}
					]

				}
			}
		},
		"CloudShroudRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
							"Effect": "Allow",
							"Principal": {
								"Service": "ec2.amazonaws.com"
							},
							"Action": "sts:AssumeRole"
						}
					]
				},
				"Path": "/"
			}
		},

		"CFInstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [{
						"Ref": "CloudShroudRole"
					}
				]
			}
		},

		"CloudShroudsg": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Security group used by CloudShroud controlbox and VPN instances",
				"VpcId": {
					"Ref": "VPCID"
				}
			}
		},
		"subnetroute1": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"RouteTableId": {
					"Ref": "CSroutetable"
				},
				"SubnetId": {
					"Ref": "CFsubnetAresource"
				}
			}
		},
		"subnetroute2": {
			"Type": "AWS::EC2::SubnetRouteTableAssociation",
			"Properties": {
				"RouteTableId": {
					"Ref": "CSroutetable"
				},
				"SubnetId": {
					"Ref": "CFsubnetBresource"
				}
			}
		},
		"assoc1": {
			"Type": "AWS::EC2::EIPAssociation",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"eip1",
						"AllocationId"
					]
				},
				"InstanceId": {
					"Ref": "controlboxEC2"
				}
			}
		},
		"assoc2": {
			"Type": "AWS::EC2::EIPAssociation",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"eip2",
						"AllocationId"
					]
				},
				"InstanceId": {
					"Ref": "CloudShroudEC2A"
				}
			}
		},
		"assoc3": {
			"Type": "AWS::EC2::EIPAssociation",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"eip3",
						"AllocationId"
					]
				},
				"InstanceId": {
					"Ref": "CloudShroudEC2B"
				}
			}
		},

		"ingress2": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Ref": "CloudShroudsg"
				},
				"IpProtocol": "tcp",
				"FromPort": "22",
				"ToPort": "22",
				"CidrIp": {
					"Ref": "SSHSourceIP"
				}
			}
		},
		"ingress3": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Ref": "CloudShroudsg"
				},
				"IpProtocol": "50",
				"CidrIp": "0.0.0.0/0"
			}
		},
		"ingress4": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Ref": "CloudShroudsg"
				},
				"IpProtocol": "udp",
				"FromPort": "4500",
				"ToPort": "4500",
				"CidrIp": "0.0.0.0/0"
			}
		},
		"ingress5": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Ref": "CloudShroudsg"
				},
				"IpProtocol": "udp",
				"FromPort": "500",
				"ToPort": "500",
				"CidrIp": "0.0.0.0/0"
			}
		},
		"ingress6": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Ref": "CloudShroudsg"
				},
				"IpProtocol": "-1",
				"SourceSecurityGroupId": {
					"Ref": "CloudShroudsg"
				}
			}
		},
		"ingress7": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Ref": "CloudShroudsg"
				},
				"IpProtocol": "icmp",
				"FromPort": "-1",
				"ToPort": "-1",
				"CidrIp": "0.0.0.0/0"
			}
		},		

		"egress1": {
			"Type": "AWS::EC2::SecurityGroupEgress",
			"Properties": {
				"GroupId": {
					"Ref": "CloudShroudsg"
				},
				"IpProtocol": "-1",
				"CidrIp": "0.0.0.0/0"
			}
		}

	},
	"Outputs": {
		"ControlBoxEIP": {
			"Description": "The public IP to your CloudShroud controlbox",
			"Value": {
				"Fn::GetAtt": ["controlboxEC2", "PublicIp"]
			}
		},
		"CloudShroudEC2AEIP": {
			"Description": "The public IP of CloudShroud VPN endpoint 'A'",
			"Value": {
				"Fn::GetAtt": ["CloudShroudEC2A", "PublicIp"]
			}
		},
		"CloudShroudEC2BEIP": {
			"Description": "The public IP of CloudShroud VPN endpoint 'B'",
			"Value": {
				"Fn::GetAtt": ["CloudShroudEC2B", "PublicIp"]
			}
		}

	}
}
