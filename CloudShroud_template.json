{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "CloudShroud is a helper CF template which will launch and automate the setup of a *swan EC2 to act as a VPN endpoint to your VPC.",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [{
					"Label": {
						"default": "General VPC Configuration"
					},
					"Parameters": ["InstanceType", "TerminatePro", "VPCID", "SwanSubnet", "KeyName", "SSHSourceIP"]
				}, {
					"Label": {
						"default": "Phase 1 IKE Settings (optional)"
					},
					"Parameters": ["IKEversion", "IKEenc", "IKEint", "IKEDhGroup", "IKELifetime", "VPNName", "PSK", "RemotePeer"]
				}, {
					"Label": {
						"default": "Phase 2 IPSEC Settings (optional)"
					},
					"Parameters": ["Phase2Enc", "Phase2Int", "PFS", "Phase2Lifetime", "RemoteNet"]
				}, {
					"Label": {
						"default": "Advanced Settings (optional)"
					},
					"Parameters": ["RouteType", "LocalNATNet", "LinkLocal", "LinkRemote"]

				}
			],

			"ParameterLabels": {
				"InstanceType": {
					"default": "*swan EC2 type"
				},
				"VPCID": {
					"default": "Deployment VPC"
				},
				"SwanSubnet": {
					"default": "The public subnet to deploy *swan EC2"
				},
				"KeyName": {
					"default": "The SSH key pair"
				},
				"SSHSourceIP": {
					"default": "SSH Source IP"
				},
				"PSK": {
					"default": "Preshared Key"
				},
				"RemotePeer": {
					"default": "Remote VPN peer"
				},
				"RemoteNet": {
					"default": "LAN(s) behind remote VPN peer"
				},
				"LocalNATNet": {
					"default": "Local NAT Host(s) or Network"
				},
				"Phase2Enc": {
					"default": "Phase 2 IPSEC Encryption"
				},
				"Phase2Int": {
					"default": "Phase 2 IPSEC Integrity"
				},
				"PFS": {
					"default": "Perfect Forward Secrecy"
				},
				"VPNName": {
					"default": "VPN Name"
				},
				"LinkLocal": {
					"default": "Local VTI IP"
				},
				"LinkRemote": {
					"default": "Remote VTI IP"
				},
				"TerminatePro": {
					"default": "EC2 Termination Protection"
				},
				"RouteType": {
					"default": "VPN Routing Type"
				},
				"IKEenc": {
					"default": "Phase 1 IKE Encryption"
				},
				"IKEint": {
					"default": "Phase 1 IKE Integrity"
				},
				"IKELifetime": {
					"default": "Phase 1 IKE Lifetime"
				},
				"Phase2Lifetime": {
					"default": "Phase 2 IPSEC Lifetime"
				},
				"IKEDhGroup": {
					"default": "Phase 1 IKE DH Group"
				}
			}

		}
	},

	"Parameters": {
		"KeyName": {
			"Description": "Name of an existing EC2 KeyPair to SSH with",
			"Default": "MyKey",
			"Type": "AWS::EC2::KeyPair::KeyName",
			"ConstraintDescription": "must be the name of an existing EC2 KeyPair."
		},
		"InstanceType": {
			"Description": "Pick the *swan instance type.",
			"Type": "String",
			"Default": "t2.small",
			"AllowedValues": ["t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "g2.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r3.large", "r3.xlarge", "r3.4xlarge", "r3.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge",
				"d2.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge"
			],
			"ConstraintDescription": "must be a valid EC2 type."
		},
		"TerminatePro": {
			"Description": "It's advisable to leave this to 'True'. If you have this feature enabled it will help prevent from accidently terminating your Swan server without further disabling the protection.",
			"Type": "String",
			"Default": "True",
			"AllowedValues": ["True", "False"]
		},
		"SSHSourceIP": {
			"Description": "The public IP or IP range of your home or office that you want to allow SSH from.",
			"Type": "String",
			"MinLength": "9",
			"MaxLength": "18",
			"Default": "0.0.0.0/0",
			"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
		},
		"VPCID": {
			"Description": "This is the VPC that you want to launch *swan in. NOTE: Your VPC must have an attached Internet Gateway for this stack to successfully deploy a working VPN!",
			"Type": "AWS::EC2::VPC::Id",
			"ConstraintDescription": "must choose a valid existing VPC to launch CloudShroud in."
		},
		"SwanSubnet": {
			"Description": "Choose a public subnet in your VPC to launch *swan in. NOTE: This stack will not deploy properly if you choose a private subnet!",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"PSK": {
			"Description": "The preshared key that you want to use for the VPN. You can use upper/lower letters, numbers, special characters (#!@&) and password length must be a min of 8 characters and max of 30.",
			"Type": "String",
			"MinLength": "8",
			"MaxLength": "30",
			"NoEcho": "True",
			"AllowedPattern": "([#!@&a-zA-Z0-9]+)",
			"ConstraintDescription": "Preshared Key  upper and lower letters, numbers, and password length must be a min of 8 characters and max of 30."
		},
		"RemotePeer": {
			"Description": "The remote public peer IP you want to establish the VPN to",
			"Type": "String",
			"MinLength": "7",
			"MaxLength": "16",
			"Default": "127.0.0.1",
			"AllowedPattern": "^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$",
			"ConstraintDescription": "Peer IP must be a valid IP."
		},
		"RemoteNet": {
			"Description": "The remote network(s) or host(s) that you want to connect to over a VPN. Multiple hosts or networks can be separated by commas, such as '10.0.0.0/16,172.16.0.0/16,1.2.3.1/32 ...etc'. Note: Individual host IPs must use /32, such as '1.1.1.1/32'",
			"Type": "String",
			"AllowedPattern": "(( *)?(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})( ,|,|, )?)+",
			"ConstraintDescription": "Remote networks must be a valid IP CIDR range of the form x.x.x.x/x. (Example 10.0.0.0/16)."
		},
		"LocalNATNet": {
			"Description": "There are two methods of NAT'ing - Dynamic NAT and 1:1 NAT. For Dynamic NAT specify a single network to translate your entire VPC to. The network mask must be the same as your VPC network. In this case host IPs will translate directly from the actual VPC network to NAT network, and vice versa. Alternatively, you can specify individual 1:1 mappings of host IPs to NAT IPs, separated by commas - such as '<VPC IP>,<NAT IP>,<VPC IP>,<NAT IP>...',. For example you could specify 10.0.0.27, 192.168.25.24 assuming that 192.168.25.24 is an EC2 in your VPC and you want to translate it to NAT IP, 10.0.0.27. You can also choose 'disabled' to bypass this feature",
			"Type": "String",
			"Default": "Disable",
			"AllowedPattern": "(( *)?(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})( *)?|(( *)?(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})( ,|,|, )?)+|([d,D][i,I][s,S][a,A][b,B][l,L][e,E]))",
			"ConstraintDescription": "You must choose a valid NAT IP(s) or network"
		},
		"RouteType": {
			"Description": "You can choose whether this VPN should be 'policy-based' or 'route-based'. Default is route-based. Alternatively, you can choose a specific preset depending on what the remote peer is using for their firewall (note that these presets are still in experimental stage however and will be updated continually). All IKEv1/IKEv2 route-based VPNs and IKEv2 policy-based VPNs will use Strongswan, whereas all IKEv1 policy-based VPNs will use Openswan",
			"Type": "String",
			"Default": "route-based",
			"AllowedValues": ["policy-based", "route-based", "cisco-asa", "cisco-ios"],
			"ConstraintDescription": "You must choose policy-based or route-based VPN"
		},

		"IKEversion": {
			"Description": "The IKE version to use.",
			"Type": "String",
			"Default": "ikev1",
			"AllowedValues": ["ikev1", "ikev2"]
		},
		"IKEenc": {
			"Description": "Encryption to use for phase 1. ",
			"Type": "String",
			"Default": "aes128",
			"AllowedValues": ["aes128", "aes192", "aes256", "3des", "camellia128", "camellia192", "camellia256"]
		},
		"IKEint": {
			"Description": "Integrity to use for phase 1. ",
			"Type": "String",
			"Default": "sha1",
			"AllowedValues": ["md5", "sha1", "sha256", "sha384", "sha512", "sha256_96"]

		},
		"IKELifetime": {
			"Description": "Lifetime in hours to use for phase 1. Range 2-24",
			"Type": "String",
			"Default": "8",
			"AllowedPattern": "([2-9]|1[0-9]|2[0-4])"
		},
		"IKEDhGroup": {
			"Description": "The Diffie-Hellman group to use for phase 1 key exchange",
			"Type": "String",
			"Default": "Group2",
			"AllowedValues": ["Group2", "Group5", "Group14", "Group15", "Group16", "Group17", "Group18", "Group19", "Group20", "Group21", "Group22", "Group23", "Group24", "Group25", "Group26", "Group27", "Group28", "Group29", "Group30"]
		},

		"PFS": {
			"Description": "You need to specify a DH group here ONLY if you are using Perfect Forward Secrecy (PFS). Alternatively, you can choose 'Disable' to disable PFS",
			"Type": "String",
			"Default": "Group2",
			"AllowedValues": ["Disable", "Group2", "Group5", "Group14", "Group15", "Group16", "Group17", "Group18", "Group19", "Group20", "Group21", "Group22", "Group23", "Group24", "Group25", "Group26", "Group27", "Group28", "Group29", "Group30"],
			"ConstraintDescription": "You must choose acceptable keyword for DH group, or 'disable'"
		},
		"Phase2Enc": {
			"Description": "Encryption to use for phase 2 (IPSEC). This setting is only needed if you are using ikev1 and PFS",
			"Type": "String",
			"Default": "aes128",
			"AllowedValues": ["aes128", "aes192", "aes256", "3des", "camellia128", "camellia192", "camellia256"],
			"ConstraintDescription": "phase 2 encryption must be valid"
		},
		"Phase2Int": {
			"Description": "Integrity to use for phase 2",
			"Type": "String",
			"Default": "sha1",
			"AllowedValues": ["md5", "sha1", "sha256", "sha384", "sha512", "sha256_96"],
			"ConstraintDescription": "You must choose a valid authentication"
		},
		"Phase2Lifetime": {
			"Description": "Lifetime in hours to use for phase 2. Range 1-23",
			"Type": "String",
			"Default": "1",
			"AllowedPattern": "([1-9]|1[0-9]|2[0-3])"
		},

		"VPNName": {
			"Description": "What would you like to name this VPN? You can use only upper/lower case letters (a-z) and underscores (_) or dashes (-)",
			"Type": "String",
			"Default": "site-abc",
			"AllowedPattern": "[a-zA-Z,_,-]+",
			"ConstraintDescription": "You must choose a valid name for your VPN"
		},
		"LinkLocal": {
			"Description": "The local virtual tunnel interface (VTI) IP. You can leave this as default unless there is a specific reason to change it (ie. IP conflict with VPN peer). It's only relevant for route-based VPN.",
			"Type": "String",
			"Default": "169.254.13.254/30",
			"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription": "You must choose a valid local VTI IP"
		},
		"LinkRemote": {
			"Description": "The remote virtual tunnel interface (VTI) IP. You can leave this as default unless there is a specific reason to change it. It's only relevant for route-based VPN.",
			"Type": "String",
			"Default": "169.254.13.253/30",
			"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription": "You must choose a valid remote VTI IP"
		}
	},

	"Mappings": {
		"RegionMap": {
			"us-east-1": {
				"Strongswan": "ami-74cff562",
				"Openswan": "ami-54d2e842"
			},
			"us-west-1": {
				"Strongswan": "ami-8e1b34ee",
				"Openswan": "ami-49002f29"
			},
			"us-west-2": {
				"Strongswan": "ami-7e776407",
				"Openswan": "ami-6f736016"
			},
			"eu-west-1": {
				"Strongswan": "ami-e594759c",
				"Openswan": "ami-3d927344"
			},
			"eu-west-2": {
				"Strongswan": "ami-97c1d7f3",
				"Openswan": "ami-6ac2d40e"
			},
			"us-east-2": {
				"Strongswan": "ami-7f18391a",
				"Openswan": "ami-f4183991"
			},
			"ap-southeast-1": {
				"Strongswan": "ami-7be36918",
				"Openswan": "ami-99ec66fa"
			},
			"ap-southeast-2": {
				"Strongswan": "ami-75d5c716",
				"Openswan": "ami-0dd7c56e"
			},
			"ap-northeast-1": {
				"Strongswan": "ami-f2adb195",
				"Openswan": "ami-5e819d39"
			},
			"ap-northeast-2": {
				"Strongswan": "",
				"Openswan": "ami-5486583a"
			},
			"sa-east-1": {
				"Strongswan": "ami-c00277ac",
				"Openswan": "ami-14017478"
			},
			"eu-central-1": {
				"Strongswan": "ami-cc8f2fa3",
				"Openswan": "ami-8e8f2fe1"
			},
			"ca-central-1": {
				"Strongswan": "ami-d77fc0b3",
				"Openswan": "ami-c2803fa6"
			},
			"ap-south-1": {
				"Strongswan": "ami-21d4aa4e",
				"Openswan": "ami-f8d2ac97"
			}

		}
	},
	"Resources": {
		"swanEIP": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc",
				"InstanceId": {
					"Ref": "swanEC2"
				}
			}
		},
		"swanEC2": {
			"Type": "AWS::EC2::Instance",
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"configSets": {
						"Install": ["Install"]
					},

					"Install": {
						"files": {
							"/etc/cloudshroud/setup": {
								"source": "https://raw.githubusercontent.com/mysteryguy123/CloudShroud/master/setup",
								"mode": "000755",
								"user": "root",
								"group": "root"
							},
							"/etc/cloudshroud/aws.updown": {
								"source": "https://raw.githubusercontent.com/mysteryguy123/CloudShroud/master/aws.updown",
								"mode": "000755",
								"user": "root",
								"group": "root"

							},
							"/etc/init.d/cloudshroud-cleanup": {
								"source": "https://raw.githubusercontent.com/mysteryguy123/CloudShroud/master/cloudshroud-cleanup",
								"mode": "000755",
								"user": "root",
								"group": "root"
							}
						},
						"commands": {
							"setvpc": {
								"command": "echo VPC=\"$VPC\" >> /etc/cloudshroud/variables",
								"env": {
									"VPC": {
										"Ref": "VPCID"
									}
								}
							},
							"setregion": {
								"command": "echo REGION=\"$REGION\" >> /etc/cloudshroud/variables",
								"env": {
									"REGION": {
										"Ref": "AWS::Region"
									}

								}
							},
							"setonprem": {
								"command": "echo ONPREM=\"'${ONPREM}'\" >> /etc/cloudshroud/variables",
								"env": {
									"ONPREM": {
										"Ref": "RemoteNet"
									}

								}
							},
							"setnat": {
								"command": "echo NAT=\"'${NAT}'\" >> /etc/cloudshroud/variables",
								"env": {
									"NAT": {
										"Ref": "LocalNATNet"
									}

								}
							},
							"setroutetype": {
								"command": "echo TYPE=\"$TYPE\" >> /etc/cloudshroud/variables",
								"env": {
									"TYPE": {
										"Ref": "RouteType"
									}
								}
							},
							"setpfs": {
								"command": "echo PFS=\"$PFS\" >> /etc/cloudshroud/variables",
								"env": {
									"PFS": {
										"Ref": "PFS"
									}
								}
							},
							"setenc": {
								"command": "echo P2ENC=\"$P2ENC\" >> /etc/cloudshroud/variables",
								"env": {
									"P2ENC": {
										"Ref": "Phase2Enc"
									}
								}
							},
							"sethash": {
								"command": "echo P2HASH=\"$P2HASH\" >> /etc/cloudshroud/variables",
								"env": {
									"P2HASH": {
										"Ref": "Phase2Int"
									}
								}
							},

							"setpsk": {
								"command": "echo PSK=\"'$PSK'\" >> /etc/cloudshroud/variables",
								"env": {
									"PSK": {
										"Ref": "PSK"
									}
								}

							},
							"setpeer": {
								"command": "echo PEER=\"$PEER\" >> /etc/cloudshroud/variables",
								"env": {
									"PEER": {
										"Ref": "RemotePeer"
									}
								}

							},
							"setsgid": {
								"command": "echo SG_ID=\"$SG_ID\" >> /etc/cloudshroud/variables",
								"env": {
									"SG_ID": {
										"Ref": "swanSg"
									}
								}
							},
							"setname": {
								"command": "echo NAME=\"$NAME\" >> /etc/cloudshroud/variables",
								"env": {
									"NAME": {
										"Ref": "VPNName"
									}
								}
							},
							"setlinklocal": {
								"command": "echo LINKLOCAL=\"$LL\" >> /etc/cloudshroud/variables",
								"env": {
									"LL": {
										"Ref": "LinkLocal"
									}
								}
							},
							"setlinkremote": {
								"command": "echo LINKREMOTE=\"$LR\" >> /etc/cloudshroud/variables",
								"env": {
									"LR": {
										"Ref": "LinkRemote"
									}
								}
							},
							"setikeversion": {
								"command": "echo IKEVERSION=\"$IKEVERSION\" >> /etc/cloudshroud/variables",
								"env": {
									"IKEVERSION": {
										"Ref": "IKEversion"
									}
								}
							},
							"setikeenc": {
								"command": "echo P1ENC=\"$P1ENC\" >> /etc/cloudshroud/variables",
								"env": {
									"P1ENC": {
										"Ref": "IKEenc"
									}
								}
							},
							"setikeint": {
								"command": "echo P1INT=\"$P1INT\" >> /etc/cloudshroud/variables",
								"env": {
									"P1INT": {
										"Ref": "IKEint"
									}
								}
							},
							"setikelifetime": {
								"command": "echo P1LIFE=\"$P1LIFE\" >> /etc/cloudshroud/variables",
								"env": {
									"P1LIFE": {
										"Ref": "IKELifetime"
									}
								}
							},
							"setp2lifetime": {
								"command": "echo P2LIFE=\"$P2LIFE\" >> /etc/cloudshroud/variables",
								"env": {
									"P2LIFE": {
										"Ref": "Phase2Lifetime"
									}
								}
							},
							"setikedhgroup": {
								"command": "echo P1DHGROUP=\"$P1DHGROUP\" >> /etc/cloudshroud/variables",
								"env": {
									"P1DHGROUP": {
										"Ref": "IKEDhGroup"
									}
								}
							},

							"startscript": {
								"command": "bash /etc/cloudshroud/setup"
							},
							"startstrolgswan": {
								"command": "service ipsec restart"
							},
							"startstrongswan": {
								"command": "strongswan restart"
							},
							"sttcheckconfig": {
								"command": "chkconfig --add cloudshroud-cleanup"
							},
							"touchfile": {
								"command": "touch /var/lock/subsys/cloudshroud-cleanup"
							}
						}
					}

				}
			},
			"Properties": {
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
								"#!/bin/bash -xe\n",
								"# Create cloudshroud directory\n",
								"mkdir /etc/cloudshroud/\n",
								"chown root:root /etc/cloudshroud/\n",
								"# Create variables file from EC2 metadata\n",
								"/opt/aws/bin/cfn-init -v ",
								"         --stack ", {
									"Ref": "AWS::StackName"
								},
								"         --resource swanEC2 ",
								"         --configsets Install ",
								"         --region ", {
									"Ref": "AWS::Region"
								}
							]]
					}
				},
				"DisableApiTermination": {
					"Ref": "TerminatePro"
				},
				"InstanceInitiatedShutdownBehavior": "stop",
				"ImageId": {
					"Fn::If":
					["RouteBasedOrIKEv2", {
							"Fn::FindInMap": ["RegionMap", {
									"Ref": "AWS::Region"
								}, "Strongswan"]
						}, {
							"Fn::FindInMap": ["RegionMap", {
									"Ref": "AWS::Region"
								}, "Openswan"]
						}
					]
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"IamInstanceProfile": {
					"Ref": "swanInstanceProfile"
				},
				"SourceDestCheck": "false",
				"KeyName": {
					"Ref": "KeyName"
				},
				"Monitoring": "false",
				"Tags": [{
						"Key": "Name",
						"Value": "swanEC2"
					}
				],
				"NetworkInterfaces": [{
						"AssociatePublicIpAddress": "False",
						"DeleteOnTermination": "true",
						"Description": "Interface of swan Ec2",
						"DeviceIndex": 0,
						"SubnetId": {
							"Ref": "SwanSubnet"
						},
						"GroupSet": [{
								"Ref": "swanSg"
							}
						]
					}
				]

			}
		},

		"swanIAMPolicy": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"Roles": [{
						"Ref": "swanIAMRole"
					}
				],
				"PolicyName": "swanAPIaccess",
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
							"Effect": "Allow",
							"Action": [
								"ec2:AuthorizeSecurityGroupIngress",
								"ec2:DescribeSecurityGroups",
								"ec2:DescribeRouteTables",
								"ec2:DescribeVpcs",
								"ec2:CreateRoute",
								"ec2:RevokeSecurityGroupIngress",
								"ec2:DeleteRoute",
								"cloudwatch:GetMetricStatistics",
								"cloudwatch:ListMetrics",
								"cloudwatch:PutMetricData"
							],
							"Resource": "*"
						}
					]

				}
			}
		},
		"swanIAMRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
							"Effect": "Allow",
							"Principal": {
								"Service": "ec2.amazonaws.com"
							},
							"Action": "sts:AssumeRole"
						}
					]
				},
				"Path": "/"
			}
		},

		"swanInstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [{
						"Ref": "swanIAMRole"
					}
				]
			}
		},

		"swanSg": {
			"DependsOn": ["swanIAMPolicy", "swanIAMRole", "swanInstanceProfile"],
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Security group used by swan EC2",
				"VpcId": {
					"Ref": "VPCID"
				}
			}
		},

		"swanEIPAssoc": {
			"Type": "AWS::EC2::EIPAssociation",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"swanEIP",
						"AllocationId"
					]
				},
				"InstanceId": {
					"Ref": "swanEC2"
				}
			}
		},

		"ingress2": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Ref": "swanSg"
				},
				"IpProtocol": "tcp",
				"FromPort": "22",
				"ToPort": "22",
				"CidrIp": {
					"Ref": "SSHSourceIP"
				}
			}
		},
		"ingress3": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Ref": "swanSg"
				},
				"IpProtocol": "50",
				"CidrIp": {
					"Fn::Join": ["", [{
								"Ref": "RemotePeer"
							}, "/32"]]
				}
			}
		},
		"ingress4": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Ref": "swanSg"
				},
				"IpProtocol": "udp",
				"FromPort": "4500",
				"ToPort": "4500",
				"CidrIp": {
					"Fn::Join": ["", [{
								"Ref": "RemotePeer"
							}, "/32"]]
				}
			}
		},
		"ingress5": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Ref": "swanSg"
				},
				"IpProtocol": "udp",
				"FromPort": "500",
				"ToPort": "500",
				"CidrIp": {
					"Fn::Join": ["", [{
								"Ref": "RemotePeer"
							}, "/32"]]
				}
			}
		}
	},
	"Conditions": {
		"RouteBased": {
			"Fn::Or": [{
					"Fn::Equals": ["cisco-ios", {
							"Ref": "RouteType"
						}
					]
				}, {
					"Fn::Equals": ["route-based", {
							"Ref": "RouteType"
						}
					]
				}
			]
		},
		"RouteBasedOrIKEv2": {
			"Fn::Or": [{
					"Fn::Equals": ["ikev2", {
							"Ref": "IKEversion"
						}
					]
				}, {
					"Fn::Equals": ["route-based", {
							"Ref": "RouteType"
						}
					]
				}, {
					"Fn::Equals": ["cisco-ios", {
							"Ref": "RouteType"
						}
					]
				}
			]

		},

		"PFSenabled": {
			"Fn::Not": [{
					"Fn::Equals": [{
							"Ref": "PFS"
						},
						"Disable"]
				}
			]
		},
		"PFSNotEnabled": {
			"Fn::Equals": [{
					"Ref": "PFS"
				},
				"Disable"]
		}
	},

	"Outputs": {
		"VPNendpoint": {
			"Description": "The public IP of your *swan VPN endpoint.",
			"Value": {
				"Fn::GetAtt": ["swanEC2", "PublicIp"]
			}
		},
		"AWSTunnelVtiIp": {
			"Description": "The inside tunnel VTI IP on the AWS side of this VPN",
			"Value": {
				"Ref": "LinkLocal"
			},
			"Condition": "RouteBased"
		},
		"RemoteTunnelVtiIp": {
			"Description": "The inside tunnel VTI IP for the remote side of this VPN",
			"Value": {
				"Ref": "LinkRemote"
			},
			"Condition": "RouteBased"
		}
	}
}
