{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description":"CloudShroud is a helper CF template which will launch and automate the setup of a Strongswan EC2 to act as a VPN endpoint to your VPC.",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [{
					"Label": {
						"default": "Basic VPN Configuration"
					},
					"Parameters": ["InstanceType","TerminatePro","VPCID", "StrongswanSubnet", "KeyName", "SSHSourceIP", "VPNName", "PSK", "RemotePeer", "RemoteNet"]
				},
				{
					"Label": {
						"default": "Advanced Configuration (optional)"
					},
					"Parameters": ["LocalNATNet","RouteType","LinkLocal","LinkRemote"]
				},
				{
					"Label": {
						"default": "***Needed ONLY with IKEv1 and PFS***"
					},
					"Parameters": ["PFS", "Phase2Enc", "Phase2Hash"]
				}
			],
			"ParameterLabels" : {
				"InstanceType": {"default" : "Strongswan EC2 type"},
				"VPCID" : { "default" : "Deployment VPC" },
				"StrongswanSubnet" : {"default":"The public subnet to deploy Strongswan EC2"},
				"KeyName" : {"default":"The SSH key pair"},
				"SSHSourceIP":{"default":"SSH Source IP"},
				"PSK":{"default":"Preshared Key"},
				"RemotePeer":{"default":"Remote VPN peer"},
				"RemoteNet":{"default":"LAN(s) behind remote VPN peer"},
				"LocalNATNet": {"default":"NAT Network"},
				"Phase2Enc":{"default": "Phase 2/IPSEC Encryption"},
				"Phase2Hash":{"default":"Phase 2/Authentication"},
				"PFS": {"default":"Perfect Forward Secrecy"},
				"VPNName": {"default":"VPN Name"},
				"LinkLocal": {"default": "Local VTI IP"},
				"LinkRemote": {"default": "Remote VTI IP"},
				"TerminatePro": {"default":"EC2 Termination Protection"}
            }

		}
	},

	"Parameters": {
		"KeyName": {
			"Description": "Name of an existing EC2 KeyPair to SSH into Strongswan with",
			"Default": "MyKey",
			"Type": "AWS::EC2::KeyPair::KeyName",
			"ConstraintDescription": "must be the name of an existing EC2 KeyPair."
		},
		"InstanceType": {
			"Description": "Pick the Strongswan instance type.",
			"Type": "String",
			"Default": "t2.small",
			"AllowedValues": ["t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "g2.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "r3.large", "r3.xlarge", "r3.4xlarge", "r3.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge",
				"d2.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge"
			],
			"ConstraintDescription": "must be a valid EC2 type."
		},
		"TerminatePro": {
			"Description": "It's advisable to leave this to 'True'. If you have this feature enabled it will help prevent from accidently terminating your Strongswan server without further disabling the protection.",
			"Type":"String",
			"Default": "True",
			"AllowedValues": ["True","False"]
			},
		"SSHSourceIP": {
			"Description": "The public IP or IP range of your home or office that you want to allow SSH from.",
			"Type": "String",
			"MinLength": "9",
			"MaxLength": "18",
			"Default": "0.0.0.0/0",
			"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
		},
		"VPCID": {
			"Description": "This is the VPC id that you want to launch Strongswan in. NOTE: Your VPC must have an attached Internet Gateway for this stack to successfully deploy!",
			"Type": "AWS::EC2::VPC::Id",
			"ConstraintDescription": "must choose a valid existing VPC id."
		},
		"StrongswanSubnet": {
			"Description": "Choose a valid public subnet in your VPC to launch Strongswan in. NOTE: This stack will not deploy properly if you choose a private subnet!",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"PSK": {
			"Description": "The preshared key that you want to use for the VPN. You can use upper and lower letters, numbers, and password length must be a min of 8 characters and max of 30.",
			"Type": "String",
			"MinLength": "8",
			"MaxLength": "30",
			"NoEcho":"True",
			"ConstraintDescription": "Preshared Key  upper and lower letters, numbers, and password length must be a min of 8 characters and max of 30."
		},
		"RemotePeer": {
			"Description": "The remote public peer IP you want to establish the VPN to",
			"Type": "String",
			"MinLength": "7",
			"MaxLength": "16",
			"Default": "127.0.0.1",
			"AllowedPattern": "^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$",
			"ConstraintDescription": "Peer IP must be a valid IP."
		},
		"RemoteNet": {
			"Description": "The remote network(s) or host(s) that you want to connect to over a VPN. Multiple hosts or networks can be separated by commas, such as '10.0.0.0/16,172.16.0.0/16,1.2.3.1/32 ...etc'. Note: Individual host IPs must use /32, such as '1.1.1.1/32'",
			"Type": "String",
			"AllowedPattern": "(( *)?(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})( ,|,|, )?)+",
			"ConstraintDescription": "Remote networks must be a valid IP CIDR range of the form x.x.x.x/x. (Example 10.0.0.0/16)."
		},
		"LocalNATNet": {
			"Description": "There are two methods of NAT'ing - Dynamic NAT and 1:1 NAT. For Dynamic NAT specify a single network to translate your entire VPC to. The network mask must be the same as your VPC network. In this case host IPs will translate directly from the actual VPC network to NAT network, and vice versa. Alternatively, you can specify individual 1:1 mappings of host IPs to NAT IPs, separated by commas - such as '<VPC IP>,<NAT IP>,<VPC IP>,<NAT IP>...',. For example you could specify 10.0.0.27,192.168.25.24 assuming that 192.168.25.24 is an EC2 in your VPC and you want to translate it to NAT IP, 10.0.0.27. You can also choose 'disabled' to bypass this feature",
			"Type":"String",
			"Default": "disabled",
			"AllowedPattern": "(( *)?(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})( *)?|(( *)?(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})( ,|,|, )?)+|([d,D][i,I][s,S][a,A][b,B][l,L][e,E][d,D]))",
			"ConstraintDescription": "You must choose a valid NAT IP(s) or network"
		},
		"RouteType": {
			"Description": "You can choose whether this VPN should be 'policy-based' or 'route-based'. Default is route-based",
			"Type": "String",
			"Default":"route-based",
			"AllowedValues": ["policy-based","route-based"],
			"ConstraintDescription": "You must choose policy-based or route-based VPN"
		},

		"PFS": {
			"Description": "You need to set this value ONLY if you are using ikev1 AND perfect forward secrecy (PFS) together. If you are using IKEv2 with/without PFS, or if you are using IKEv1 without PFS, you can choose to 'Skip' to bypass this part, as it will be handled automatically",
			"Type": "String",
			"Default": "Skip",
			"AllowedValues": ["Skip","Group2","Group5","Group14","Group15","Group16","Group17","Group18","Group19","Group20","Group21","Group22","Group23","Group24","Group25","Group26","Group27","Group28","Group29","Group30"],
			"ConstraintDescription": "You must choose acceptable keyword for DH group, or 'disable'"
		},
		"Phase2Enc": {
			"Description": "Encryption to use for phase 2 (IPSEC). This setting is only needed if you are using ikev1 and PFS",
			"Type": "String",
			"Default": "aes128",
			"AllowedValues": ["aes128","aes192","aes256","3des","blowfish128","blowfish192","blowfish256","camellia128","camellia192","camellia256","serpent128","serpent192","serpent256","twofish128","twofish192","twofish256"],
			"ConstraintDescription": "phase 2 encryption must be valid"
		},
		"Phase2Hash": {
			"Description": "Integrity (aka. Authentication) to use for phase 2 (IPSEC). This setting is only needed if you are using ikev1 and PFS",
			"Type": "String",
			"Default": "sha1",
			"AllowedValues": ["md5","sha1","sha256","sha384","sha512","sha256_96"],
			"ConstraintDescription": "You must choose a valid authentication"
		},
		"VPNName": {
			"Description": "What would you like to name this VPN? You can use only upper/lower case letters and underscores (_)",
			"Type": "String",
			"Default": "site_abc",
			"AllowedPattern": "[a-zA-Z,_]+",
			"ConstraintDescription": "You must choose a valid name for your VPN"
		},
		"LinkLocal": {
			"Description": "The local virtual tunnel interface (VTI) IP. You can leave this as default unless there is a specific reason to change it (ie. IP conflict with VPN peer), *AND* you are using route-based VPN",
			"Type": "String",
			"Default": "169.254.13.254/30",
			"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription": "You must choose a valid local VTI IP"
		},
		"LinkRemote": {
			"Description": "The remote virtual tunnel interface (VTI) IP. You can leave this as default unless there is a specific reason to change it, *AND* you are using route-based VPN",
			"Type": "String",
			"Default": "169.254.13.253/30",
			"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription": "You must choose a valid remote VTI IP"
		}
	},

	"Mappings": {
		"RegionMap": {
			"us-east-1": {
				"Strongswan": "ami-9c9a12f4"
			},
			"us-west-1": {
				"Strongswan": "ami-cf47518a"
			},
			"us-west-2": {
				"Strongswan": "ami-164a5c6f"
			},
			"eu-west-1": {
				"Strongswan": "ami-5e77c229"
			},
			"ap-southeast-1": {
				"Strongswan": "ami-9a193ac8"
			},
			"ap-southeast-2": {
				"Strongswan": "ami-e9a7c8d3"
			},
			"ap-northeast-1": {
				"Strongswan": "ami-d18cb2d0"
			},
			"sa-east-1": {
				"Strongswan": "ami-2ddb6d30"
			},
			"eu-central-1": {
				"Strongswan": "ami-6a97a577"
			},
			"ca-central-1": {
				"Strongswan": "ami-d48634b0"
			},
			"eu-west-2": {
				"Strongswan": "ami-cb212baf"
			}
		}
	},
	"Resources": {
		"StrongswanEip": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc",
				"InstanceId": {
					"Ref": "StrongswanEC2"
				}
			}
		},
		"StrongswanEC2": {
			"Type": "AWS::EC2::Instance",
			"DependsOn":"StrongswanSg",
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"configSets": {
						"Install": ["Install"]
					},

					"Install": {
						"files": {
							"/etc/strongswan/setup.sh": {
								"source": "https://raw.githubusercontent.com/mysteryguy123/CloudShroud/master/setup",
								"mode": "000755",
								"user": "root",
								"group": "root"
								},
							"/etc/strongswan/aws.updown": {
								"source": "https://raw.githubusercontent.com/mysteryguy123/CloudShroud/master/aws.updown",
								"mode": "000755",
								"user": "root",
								"group": "root"
								
								},
							"/etc/init.d/cloudshroud-cleanup": {
								"source": "https://raw.githubusercontent.com/mysteryguy123/CloudShroud/master/cloudshroud-cleanup",
								"mode": "000755",
								"user": "root",
								"group": "root"
								}
								},
						"commands": {
							"setvpc": {
								"command": "echo VPC=\"$VPC\" >> /etc/strongswan/variables",
								"env": {
									"VPC": {"Ref":"VPCID"}
									}
								},
							"setregion": {
								"command": "echo REGION=\"$REGION\" >> /etc/strongswan/variables",
								"env": {
									"REGION": {"Ref":"AWS::Region"}
						
										}
								},
							"setonprem": {
								"command": "echo ONPREM=\"'${ONPREM}'\" >> /etc/strongswan/variables",
								"env": {
									"ONPREM": {"Ref": "RemoteNet"}
						
										}
									},
							"setnat": {
								"command": "echo NAT=\"'${NAT}'\" >> /etc/strongswan/variables",
								"env": {
									"NAT": {"Ref": "LocalNATNet"}
						
										}
									},		
							"setroutetype": {
								"command": "echo TYPE=\"$TYPE\" >> /etc/strongswan/variables",
								"env": {
									"TYPE": {"Ref": "RouteType"}
								}
								},
							"setpfs": {
								"command": "echo PFS=\"$PFS\" >> /etc/strongswan/variables",
								"env": {
									"PFS": {"Ref": "PFS"}
									}
								},
							"setenc": {
								"command": "echo P2ENC=\"$P2ENC\" >> /etc/strongswan/variables",
								"env": {
									"P2ENC": {"Ref": "Phase2Enc"}
									}
								},
							"sethash": {
								"command": "echo P2HASH=\"$P2HASH\" >> /etc/strongswan/variables",
								"env": {
									"P2HASH": {"Ref": "Phase2Hash"}
									}
								},
									
							"setpsk": {
								"command": "echo PSK=\"'$PSK'\" >> /etc/strongswan/variables",
								"env": {
									"PSK": {"Ref": "PSK"}
								}
							
								},
							"setpeer":  {
								"command": "echo PEER=\"$PEER\" >> /etc/strongswan/variables",
								"env": {
									"PEER": {"Ref": "RemotePeer"}
								}
							
								},
							"setsgid": {
								"command": "echo SG_ID=\"$SG_ID\" >> /etc/strongswan/variables",
								"env": {
									"SG_ID": {"Ref": "StrongswanSg"}
								}
								},
							"setname": {
								"command": "echo NAME=\"$NAME\" >> /etc/strongswan/variables",
								"env": {
									"NAME": {"Ref": "VPNName"}
								}
								},
							"setlinklocal": {
								"command": "echo LINKLOCAL=\"$LL\" >> /etc/strongswan/variables",
								"env": {
									"LL": {"Ref": "LinkLocal"}
								}
								},
							"setlinkremote": {
								"command": "echo LINKREMOTE=\"$LR\" >> /etc/strongswan/variables",
								"env": {
									"LR": {"Ref": "LinkRemote"}
								}
								},
							"startscript": {
								"command": "bash /etc/strongswan/setup.sh"
							},
							"startstrongswan": {
								"command": "strongswan restart"
							},
							"sttcheckconfig": {
								"command": "chkconfig --add cloudshroud-cleanup"
							}
						}
					}
			
				}
			},
			"Properties": {
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["", [
								"#!/bin/bash -xe\n",
								"# Create variables file from EC2 metadata\n",
								"/opt/aws/bin/cfn-init -v ",
								"         --stack ", {
									"Ref": "AWS::StackName"
								},
								"         --resource StrongswanEC2 ",
								"         --configsets Install ",
								"         --region ", {
									"Ref": "AWS::Region"
								}
							]]
					}
				},
				"DisableApiTermination": {"Ref":"TerminatePro"},
				"InstanceInitiatedShutdownBehavior": "stop",
				"ImageId": {
					"Fn::FindInMap": ["RegionMap", {
						"Ref": "AWS::Region"
					}, "Strongswan"]
				},
				"InstanceType": {
					"Ref": "InstanceType"
				},
				"IamInstanceProfile": {
					"Ref": "StrongswanInstanceProfile"
				},
				"SourceDestCheck": "false",
				"KeyName": {
					"Ref": "KeyName"
				},
				"Monitoring": "false",
				"Tags": [{
					"Key": "Name",
					"Value": "StrongswanEc2"
				}],
				"NetworkInterfaces": [{
					"AssociatePublicIpAddress": "False",
					"DeleteOnTermination": "true",
					"Description": "Interface of Strongswan Ec2",
					"DeviceIndex": 0,
					"SubnetId": {
						"Ref": "StrongswanSubnet"
					},
					"GroupSet": [{
						"Ref": "StrongswanSg"
					}]
				}]

			}
		},



		"StrongswanIAMPolicy": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"Roles": [{
					"Ref": "StrongswanIAMRole"
				}],
				"PolicyName": "StrongswanAPIaccess",
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Action": [
							"ec2:AuthorizeSecurityGroupIngress",
							"ec2:DescribeSecurityGroups",
							"ec2:DescribeRouteTables",
							"ec2:DescribeVpcs",
							"ec2:CreateRoute",
							"ec2:RevokeSecurityGroupIngress",
							"ec2:DeleteRoute"
						],
						"Resource": "*"
					}]

				}
			}
		},
		"StrongswanIAMRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": "ec2.amazonaws.com"
						},
						"Action": "sts:AssumeRole"
					}]
				},
				"Path": "/"
			}
		},

		"StrongswanInstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [{
					"Ref": "StrongswanIAMRole"
				}]
			}
		},

		"StrongswanSg": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Security group used by Strongswan EC2",
				"VpcId": {
					"Ref": "VPCID"
				}
			}
		},

		"StrongswanEipAssoc": {
			"Type": "AWS::EC2::EIPAssociation",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"StrongswanEip",
						"AllocationId"
					]
				},
				"InstanceId": {
					"Ref": "StrongswanEC2"
				}
			}
		},

		"ingress2": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Ref": "StrongswanSg"
				},
				"IpProtocol": "tcp",
				"FromPort": "22",
				"ToPort": "22",
				"CidrIp": {
					"Ref": "SSHSourceIP"
				}
			}
		},
		"ingress3": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Ref": "StrongswanSg"
				},
				"IpProtocol": "50",
				"CidrIp": {
					"Fn::Join": ["", [{
						"Ref": "RemotePeer"
					}, "/32"]]
				}
			}
		},
		"ingress4": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Ref": "StrongswanSg"
				},
				"IpProtocol": "udp",
				"FromPort": "4500",
				"ToPort": "4500",
				"CidrIp": {
					"Fn::Join": ["", [{
						"Ref": "RemotePeer"
					}, "/32"]]
				}
			}
		},
		"ingress5": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Ref": "StrongswanSg"
				},
				"IpProtocol": "udp",
				"FromPort": "500",
				"ToPort": "500",
				"CidrIp": {
					"Fn::Join": ["", [{
						"Ref": "RemotePeer"
					}, "/32"]]
				}
			}
		}

	}
}